#!/usr/bin/env python3
import os
import logging
import sys
from dotenv import load_dotenv
import mysql.connector
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, MenuButtonWebApp, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler
import asyncio
from datetime import datetime, timedelta, time
import pytz

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
WEBAPP_URL = os.getenv('WEBAPP_URL', 'http://localhost:5000/schedule')
LOG_GROUP_ID = os.getenv('LOG_GROUP_ID')  # ID –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤

if not TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    sys.exit(1)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DB_CONFIG = {
    'host': os.getenv('MYSQL_HOST', 'localhost'),
    'user': os.getenv('MYSQL_USER'),
    'password': os.getenv('MYSQL_PASSWORD'),
    'database': os.getenv('MYSQL_DATABASE')
}

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å–∏—Å—Ç–µ–º—ã (–°–∞—Ä–∞—Ç–æ–≤)
SYSTEM_TIMEZONE = pytz.timezone('Europe/Saratov')  # UTC+4

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞
TIMEZONES = {
    'Europe/Moscow': 'üá∑üá∫ –ú–æ—Å–∫–≤–∞ (UTC+3)',
    'Europe/Saratov': 'üá∑üá∫ –°–∞—Ä–∞—Ç–æ–≤ (UTC+4)',
    'Asia/Yekaterinburg': 'üá∑üá∫ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ (UTC+5)',
    'Asia/Omsk': 'üá∑üá∫ –û–º—Å–∫ (UTC+6)',
    'Asia/Krasnoyarsk': 'üá∑üá∫ –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫ (UTC+7)',
    'Asia/Irkutsk': 'üá∑üá∫ –ò—Ä–∫—É—Ç—Å–∫ (UTC+8)',
    'Asia/Yakutsk': 'üá∑üá∫ –Ø–∫—É—Ç—Å–∫ (UTC+9)',
    'Asia/Vladivostok': 'üá∑üá∫ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫ (UTC+10)',
    'Asia/Magadan': 'üá∑üá∫ –ú–∞–≥–∞–¥–∞–Ω (UTC+11)',
    'Asia/Kamchatka': 'üá∑üá∫ –ö–∞–º—á–∞—Ç–∫–∞ (UTC+12)',
    'Europe/Kaliningrad': 'üá∑üá∫ –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥ (UTC+2)',
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
def get_user_info(username):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ë–î"""
    if not username:
        return None
    
    # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if username.startswith('@'):
        username = username[1:]
    
    try:
        conn = mysql.connector.connect(**DB_CONFIG)
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT * FROM telegram_id WHERE telegram_id = %s", (username,))
        result = cursor.fetchone()
        cursor.close()
        conn.close()
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_chat_id(username, chat_id):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    if not username:
        return False
    
    # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if username.startswith('@'):
        username = username[1:]
    
    try:
        conn = mysql.connector.connect(**DB_CONFIG)
        cursor = conn.cursor()
        cursor.execute(
            "UPDATE telegram_id SET chat_id = %s WHERE telegram_id = %s",
            (chat_id, username)
        )
        conn.commit()
        cursor.close()
        conn.close()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ chat_id: {e}")
        return False

async def send_log_to_group(application, message):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É"""
    if not LOG_GROUP_ID:
        return False
    
    try:
        await application.bot.send_message(
            chat_id=LOG_GROUP_ID,
            text=message,
            parse_mode='HTML'
        )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞ –≤ –≥—Ä—É–ø–ø—É: {e}")
        return False

def update_user_timezone(username, timezone_str):
    """–û–±–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not username:
        return False
    
    # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if username.startswith('@'):
        username = username[1:]
    
    try:
        conn = mysql.connector.connect(**DB_CONFIG)
        cursor = conn.cursor()
        cursor.execute(
            "UPDATE telegram_id SET timezone = %s WHERE telegram_id = %s",
            (timezone_str, username)
        )
        conn.commit()
        cursor.close()
        conn.close()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ timezone: {e}")
        return False

def convert_time_to_user_timezone(system_datetime, user_timezone_str):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π
    system_datetime - datetime –æ–±—ä–µ–∫—Ç –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (–°–∞—Ä–∞—Ç–æ–≤ UTC+4)
    user_timezone_str - —Å—Ç—Ä–æ–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Europe/Moscow')
    """
    try:
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –≤–º–µ—Å—Ç–æ timezone –æ–±—ä–µ–∫—Ç–∞
        if isinstance(user_timezone_str, str):
            if user_timezone_str.startswith('UTC') or user_timezone_str.startswith('+'):
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, '+04:00')
                user_timezone_str = 'Europe/Saratov'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            user_tz = pytz.timezone(user_timezone_str)
        else:
            user_tz = user_timezone_str
        
        # –õ–æ–∫–∞–ª–∏–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ –≤—Ä–µ–º—è
        system_dt_localized = SYSTEM_TIMEZONE.localize(system_datetime) if system_datetime.tzinfo is None else system_datetime
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        user_dt = system_dt_localized.astimezone(user_tz)
        
        return user_dt
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return system_datetime

def get_main_keyboard():
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = [
        [KeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def set_menu_button(bot, chat_id: int, username: str):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –¥–ª—è WebApp"""
    try:
        await bot.set_chat_menu_button(
            chat_id=chat_id,
            menu_button=MenuButtonWebApp(
                text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                web_app=WebAppInfo(url=f"{WEBAPP_URL}?username={username}")
            )
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user}")
    
    user = update.effective_user
    username = user.username
    chat_id = update.effective_chat.id

    if not username:
        await update.message.reply_text(
            "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.\n\n"
            "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ‚Üí –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    user_info = get_user_info(username)
    
    if user_info:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_chat_id(username, chat_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –æ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        log_message = (
            f"üë§ <b>–í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            f"üÜî <b>–ò–º—è:</b> {user.first_name}\n"
            f"üë§ <b>Username:</b> @{username}\n"
            f"üìã <b>–°—Ç–∞—Ç—É—Å:</b> {user_info['status']}\n"
            f"üè∑Ô∏è <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {user_info['description']}\n"
            f"‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )
        await send_log_to_group(context.application, log_message)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
        await set_menu_button(context.bot, chat_id, username)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if user_info['status'] == '—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä':
            welcome_text = (
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_info['description']}!\n\n"
                f"üìö –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
                f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π\n"
                f"‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–Ω—è—Ç–∏—è—Ö\n"
                f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞\n\n"
                f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
            )
        else:
            welcome_text = (
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_info['description']}!\n\n"
                f"üéì –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–µ–Ω–∏–∫\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
                f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π\n"
                f"‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–Ω—è—Ç–∏—è—Ö\n"
                f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞\n\n"
                f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
            )
        
        await update.message.reply_text(
            text=welcome_text,
            reply_markup=get_main_keyboard()
        )
    else:
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é ¬´–¢–≤–æ–π –£—á–∏—Ç–µ–ª—å¬ª!\n\n"
            "üìö –ú—ã –ø–æ–º–æ–≥–∞–µ–º —É—á–µ–Ω–∏–∫–∞–º –¥–æ—Å—Ç–∏–≥–∞—Ç—å –≤—ã—Å–æ–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —É—á–µ–±–µ.\n\n"
            "‚ú® –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @poliakkk"
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user}: {update.message.text}")
    
    user = update.effective_user
    username = user.username
    chat_id = update.effective_chat.id
    message_text = update.message.text

    if not username:
        await update.message.reply_text(
            "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.\n\n"
            "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ‚Üí –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    user_info = get_user_info(username)
    
    if user_info:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_chat_id(username, chat_id)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
        await set_menu_button(context.bot, chat_id, username)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
        if message_text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            log_message = (
                f"üìÖ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</b>\n\n"
                f"üë§ <b>–ò–º—è:</b> {update.message.from_user.first_name}\n"
                f"üë§ <b>Username:</b> @{username}\n"
                f"üìã <b>–°—Ç–∞—Ç—É—Å:</b> {user_info['status']}\n"
                f"üè∑Ô∏è <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {user_info['description']}\n"
                f"‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )
            await send_log_to_group(context.application, log_message)
            
            # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫—É —Å WebApp
            keyboard = [
                [InlineKeyboardButton(
                    "üìÖ –û—Ç–∫—Ä—ã—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                    web_app=WebAppInfo(url=f"{WEBAPP_URL}?username={username}")
                )]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                text=f"üìÖ {user_info['description']}, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:",
                reply_markup=reply_markup
            )
            
        elif message_text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            await show_settings(update, context, user_info)
            
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            await update.message.reply_text(
                text=f"üëã –ü—Ä–∏–≤–µ—Ç, {user_info['description']}!\n\n"
                     f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.",
                reply_markup=get_main_keyboard()
            )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        if not context.chat_data.get('denied'):
            await update.message.reply_text(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é ¬´–¢–≤–æ–π –£—á–∏—Ç–µ–ª—å¬ª!\n\n"
                "üìö –ú—ã –ø–æ–º–æ–≥–∞–µ–º —É—á–µ–Ω–∏–∫–∞–º –¥–æ—Å—Ç–∏–≥–∞—Ç—å –≤—ã—Å–æ–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —É—á–µ–±–µ.\n\n"
                "‚ú® –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @poliakkk"
            )
            context.chat_data['denied'] = True

async def show_settings(update: Update, context: ContextTypes.DEFAULT_TYPE, user_info: dict) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_tz = user_info.get('timezone', 'Europe/Saratov')
    
    # –ï—Å–ª–∏ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
    if current_tz.startswith('+') or current_tz.startswith('UTC'):
        current_tz = 'Europe/Saratov'
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    current_tz_name = TIMEZONES.get(current_tz, 'üá∑üá∫ –°–∞—Ä–∞—Ç–æ–≤ (UTC+4)')
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    keyboard = []
    for tz_key, tz_name in TIMEZONES.items():
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É –∫ —Ç–µ–∫—É—â–µ–º—É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É
        label = f"‚úÖ {tz_name}" if tz_key == current_tz else tz_name
        keyboard.append([InlineKeyboardButton(label, callback_data=f"tz:{tz_key}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    settings_text = (
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {user_info['description']}\n"
        f"üÜî <b>–°—Ç–∞—Ç—É—Å:</b> {user_info['status']}\n"
        f"üåç <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> {current_tz_name}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:"
    )
    
    await update.message.reply_text(
        text=settings_text,
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def handle_timezone_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    username = user.username
    
    if not username:
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à username")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑ callback_data
    callback_data = query.data
    if not callback_data.startswith("tz:"):
        return
    
    timezone_str = callback_data[3:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "tz:"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if update_user_timezone(username, timezone_str):
        timezone_name = TIMEZONES.get(timezone_str, timezone_str)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = get_user_info(username)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –æ —Å–º–µ–Ω–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        if user_info:
            log_message = (
                f"üåç <b>–°–º–µ–Ω–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞</b>\n\n"
                f"üë§ <b>–ò–º—è:</b> {query.from_user.first_name}\n"
                f"üë§ <b>Username:</b> @{username}\n"
                f"üìã <b>–°—Ç–∞—Ç—É—Å:</b> {user_info['status']}\n"
                f"üåç <b>–ù–æ–≤—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> {timezone_name}\n"
                f"‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )
            await send_log_to_group(context.application, log_message)
        
        if user_info:
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –≥–∞–ª–æ—á–∫–æ–π
            keyboard = []
            for tz_key, tz_name in TIMEZONES.items():
                label = f"‚úÖ {tz_name}" if tz_key == timezone_str else tz_name
                keyboard.append([InlineKeyboardButton(label, callback_data=f"tz:{tz_key}")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            settings_text = (
                f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
                f"üë§ <b>–ò–º—è:</b> {user_info['description']}\n"
                f"üÜî <b>–°—Ç–∞—Ç—É—Å:</b> {user_info['status']}\n"
                f"üåç <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> {timezone_name}\n\n"
                f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:"
            )
            
            await query.edit_message_text(
                text=settings_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        else:
            await query.edit_message_text(f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {timezone_name}")
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞")

async def send_reminder(bot, chat_id, schedule_data, user_status, time_before, user_timezone_str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–Ω—è—Ç–∏–∏"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∑–∞–Ω—è—Ç–∏—è
        if time_before == "day":
            emoji = "üìÖ"
            time_text = "–∑–∞–≤—Ç—Ä–∞"
        elif time_before == "hour":
            emoji = "‚è∞"
            time_text = "—á–µ—Ä–µ–∑ —á–∞—Å"
        else:  # 10 –º–∏–Ω—É—Ç
            emoji = "üîî"
            time_text = "—á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç"
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # schedule_data['time'] - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Ç–∏–ø–∞ "14:30"
        schedule_time_str = schedule_data['time']
        schedule_date = schedule_data.get('date')  # –î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è
        
        # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        if schedule_date:
            hours, minutes = map(int, schedule_time_str.split(':'))
            system_datetime = datetime.combine(schedule_date, time(hours, minutes))
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
            user_datetime = convert_time_to_user_timezone(system_datetime, user_timezone_str)
            time_display = user_datetime.strftime('%H:%M')
        else:
            time_display = schedule_time_str
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        lesson_type = schedule_data.get('lesson_type', 'regular')
        duration = schedule_data.get('duration_minutes', 60)
        is_trial = lesson_type == 'trial'
        
        duration_text = f"{duration} –º–∏–Ω." if duration else "60 –º–∏–Ω."
        trial_text = "üéØ –ü–†–û–ë–ù–û–ï " if is_trial else ""
        
        message = f"{emoji} –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {trial_text}–∑–∞–Ω—è—Ç–∏–µ {time_text}!\n\n"
        message += f"üìö –ü—Ä–µ–¥–º–µ—Ç: {schedule_data['subject_name']}\n"
        message += f"üïê –í—Ä–µ–º—è: {time_display} ({duration_text})\n"
        
        if user_status == '—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä':
            message += f"üë§ –£—á–µ–Ω–∏–∫: {schedule_data['student_name']}"
        else:
            message += f"üë®‚Äçüè´ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä: {schedule_data['tutor_name']}"
        
        await bot.send_message(chat_id=chat_id, text=message)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        return False

async def check_schedules(application):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    sent_reminders = set()
    
    while True:
        try:
            now = datetime.now()
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor(dictionary=True)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞
            today = now.date()
            tomorrow = (now + timedelta(days=1)).date()
            
            cursor.execute("""
                SELECT 
                    s.id, s.date, s.time, s.tutor_id, s.student_id,
                    s.lesson_type, s.duration_minutes,
                    sub.name as subject_name,
                    t1.telegram_id as tutor_username, t1.description as tutor_name, t1.chat_id as tutor_chat_id, t1.timezone as tutor_timezone,
                    t2.telegram_id as student_username, t2.description as student_name, t2.chat_id as student_chat_id, t2.timezone as student_timezone
                FROM schedule s
                JOIN subject sub ON s.subject_id = sub.id
                JOIN telegram_id t1 ON s.tutor_id = t1.id
                JOIN telegram_id t2 ON s.student_id = t2.id
                WHERE s.date IN (%s, %s) AND (t1.chat_id IS NOT NULL OR t2.chat_id IS NOT NULL)
            """, (today, tomorrow))
            
            schedules = cursor.fetchall()
            
            for schedule in schedules:
                # MySQL –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç TIME –∫–∞–∫ timedelta
                try:
                    if isinstance(schedule['time'], timedelta):
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timedelta –≤ time
                        total_seconds = int(schedule['time'].total_seconds())
                        hours = (total_seconds // 3600) % 24
                        minutes = (total_seconds % 3600) // 60
                        seconds = total_seconds % 60
                        schedule_time = time(hours, minutes, seconds)
                    elif isinstance(schedule['time'], str):
                        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–∏—à–ª–æ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ HH:MM:SS
                        time_parts = schedule['time'].split(':')
                        schedule_time = time(int(time_parts[0]), int(time_parts[1]), int(time_parts[2]) if len(time_parts) > 2 else 0)
                    else:
                        # –ï—Å–ª–∏ —É–∂–µ time –æ–±—ä–µ–∫—Ç
                        schedule_time = schedule['time']
                        
                    schedule_datetime = datetime.combine(schedule['date'], schedule_time)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–Ω—è—Ç–∏—è {schedule['id']}: {e}, —Ç–∏–ø: {type(schedule['time'])}, –∑–Ω–∞—á–µ–Ω–∏–µ: {schedule['time']}")
                    continue
                time_diff = schedule_datetime - now
                
                # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                reminder_key = f"{schedule['id']}_{schedule['date']}_{schedule['time']}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å
                if timedelta(hours=20) <= time_diff <= timedelta(hours=28):
                    day_key = f"{reminder_key}_day"
                    if day_key not in sent_reminders:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É
                        if schedule['tutor_chat_id']:
                            tutor_tz = schedule.get('tutor_timezone', 'Europe/Saratov')
                            await send_reminder(application.bot, schedule['tutor_chat_id'], schedule, '—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä', 'day', tutor_tz)
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—á–µ–Ω–∏–∫—É
                        if schedule['student_chat_id']:
                            student_tz = schedule.get('student_timezone', 'Europe/Saratov')
                            await send_reminder(application.bot, schedule['student_chat_id'], schedule, '—É—á–µ–Ω–∏–∫', 'day', student_tz)
                        sent_reminders.add(day_key)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ —á–∞—Å
                elif timedelta(minutes=55) <= time_diff <= timedelta(minutes=65):
                    hour_key = f"{reminder_key}_hour"
                    if hour_key not in sent_reminders:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É
                        if schedule['tutor_chat_id']:
                            tutor_tz = schedule.get('tutor_timezone', 'Europe/Saratov')
                            await send_reminder(application.bot, schedule['tutor_chat_id'], schedule, '—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä', 'hour', tutor_tz)
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—á–µ–Ω–∏–∫—É
                        if schedule['student_chat_id']:
                            student_tz = schedule.get('student_timezone', 'Europe/Saratov')
                            await send_reminder(application.bot, schedule['student_chat_id'], schedule, '—É—á–µ–Ω–∏–∫', 'hour', student_tz)
                        sent_reminders.add(hour_key)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 10 –º–∏–Ω—É—Ç
                elif timedelta(minutes=8) <= time_diff <= timedelta(minutes=12):
                    ten_min_key = f"{reminder_key}_10min"
                    if ten_min_key not in sent_reminders:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É
                        if schedule['tutor_chat_id']:
                            tutor_tz = schedule.get('tutor_timezone', 'Europe/Saratov')
                            await send_reminder(application.bot, schedule['tutor_chat_id'], schedule, '—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä', '10min', tutor_tz)
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—á–µ–Ω–∏–∫—É
                        if schedule['student_chat_id']:
                            student_tz = schedule.get('student_timezone', 'Europe/Saratov')
                            await send_reminder(application.bot, schedule['student_chat_id'], schedule, '—É—á–µ–Ω–∏–∫', '10min', student_tz)
                        sent_reminders.add(ten_min_key)
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            if len(sent_reminders) > 1000:
                sent_reminders.clear()
            
            cursor.close()
            conn.close()
            
            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            await asyncio.sleep(60)

async def post_init(application: Application) -> None:
    """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞"""
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    application.create_task(check_schedules(application))

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).post_init(post_init).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞)
    application.add_handler(CallbackQueryHandler(handle_timezone_callback, pattern="^tz:"))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)

if __name__ == '__main__':
    main()